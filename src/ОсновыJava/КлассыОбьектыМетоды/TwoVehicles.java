package ОсновыJava.КлассыОбьектыМетоды;
/*Прежде чем переходить к рассмотрению других вопросов, примем к сведению
следующий основополагающий принцип: каждый объект содержит собственные
копии переменных экземпляра, определенных в его классе. Следовательно,
содержимое переменных в одном объекте может отличаться от
содержимого тех же самых переменных в другом объекте. Между объектами нет
никакой связи, за исключением того, что они относятся к одному и тому же
типу. Так, если имеются два объекта типа Vehicle, каждый из них содержит
собственную копию переменных passengers, fuelcap и mpg, причем значения
одноименных переменных в этих двух объектах могут отличаться. Продемонстрируем
это на примере приведенной ниже программы (обратите внимание на
то, что класс, содержащий метод main (), на этот раз называется TwoVehicles).*/

    // В этом классе объявляется объект типа Vehicle
    class TwoVehicles {
        int passengers333; // количество пассажиров
            int fuelcap333; // емкость топливного бака
            int mpg333; // потребление топлива в милях на галлон
        public static void main(String args[]) {
            TwoVehicles minivan = new TwoVehicles();
            TwoVehicles sportscar = new TwoVehicles();
            int rangel, range2;
            // Присваивание значений полям объекта minivan
            minivan.passengers333 = 7;
            minivan.fuelcap333 = 16;
            minivan.mpg333 = 21;
// Присваивание значений полям объекта sportscar
            sportscar.passengers333 = 2;
            sportscar.fuelcap333 = 14;
            sportscar.mpg333 = 12;
// Расчет дальности поездки с полным баком горючего
            rangel = minivan.fuelcap333 * minivan.mpg333;
            range2 = sportscar.fuelcap333 * sportscar.mpg333;
            System.out.println("Мини-фургон может перевезти " + minivan.passengers333 + " пассажиров на расстояние " + rangel + " миль.");
            System.out.println("Спортивный автомобиль может перевезти " +sportscar.passengers333 + " пассажиров на  расстояние " + range2 + " миль.");
        }
}
/*Порядок создания объектов
В рассмотренных ранее примерах программ для объявления объекта типа
Vehicle использовалась следующая строка кода:
Vehicle minivan = new Vehicle();
Это объявление выполняет две функции. Во-первых, в нем задается переменная
класса Vehicle под именем minivan. Эта переменная еще не определяет
объект, она просто дает возможность ссылаться на объект. И во-вторых, в
этой строке кода создается физическая копия объекта, а ссылка на него присваивается
переменной minivan. И делается это с помощью оператора new.
Оператор new динамически (т.е. во время выполнения программы) выделяет
память для объекта и возвращает ссылку на него, которая представляет собой
адрес области памяти, выделяемой для объекта оператором new. Ссылка на объект
сохраняется в переменной. Таким образом, память для объектов всех классов
в Java выделяется динамически.
Приведенный выше код можно разбить на две строки, соответствующие отдельным
стадиям создания объекта.
Vehicle minivan; // объявление ссылки на объект
minivan = new Vehicle!); // выделение памяти для объекта
// типа Vehicle
В первой строке кода переменная minivan объявляется как ссылка на объект
типа Vehicle. Следует иметь в виду, что minivan — это переменная, которая
может ссылаться на объект, а не сам объект. В данный момент переменная minivan пока еще не ссылается на объект. Во второй строке кода создается
новый объект типа Vehicle, а ссылка на него присваивается переменной
minivan. С этого момента переменная minivan оказывается ассоциированной
с объектом.*/