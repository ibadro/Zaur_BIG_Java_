package ОсновыJava.КлассыОбьектыМетоды;
/*Как отмечалось ранее, обычно методы класса выполняют действия над данными,
входящими в состав класса, и предоставляют доступ к ним. Напомним,
что метод main () в предыдущих примерах вычислял дальность поездки транспортного
средства. При этом емкость топливного бака умножалась на количество
миль, которые может проехать машина, потребив единичный объем топлива
(в данном случае — галлон). И хотя такой расчет формально считается
правильным, его лучше выполнять в самом классе Vehicle. Преимущества подобного
решения очевидны: дальность поездки транспортного средства зависит
от потребления топлива в милях на галлон и емкости топливного бака, а обе эти
величины инкапсулированы в классе vehicle. Благодаря добавлению в класс
Vehicle метода, предназначенного для расчета искомой величины, улучшается
объектно-ориентированная структура кода. Для того чтобы добавить метод
в класс Vehicle, его следует объявить в этом классе. Например, приведенный
ниже вариант класса Vehicle содержит метод range (), определяющий и отображающий
дальность поездки транспортного средства.*/

public class Mashina4 {
    // Добавление метода ranged в класс Vehicle
    static class Vehicle1 {
        int passengers; // количество пассажиров
        int fuelcap; // емкость топливного бака
        int mpg; // потребление топлива в милях на галлон

        // Отображение дальности поездки транспортного средства
        void range() { // ◄------ Метод range () содержится в классе Vehicle
            System.out.println("Дальность - " + fuelcap * mpg + " миль."); //Обратите внимание на непосредственное указание переменных fuelcap  и mpg без использования точечной нотации
        }
    }
            static class AddMeth {
                public static void main(String args[]) {
                    Vehicle1 minivan = new Vehicle1();
                    Vehicle1 sportscar = new Vehicle1();
                    int rangel, range2;
// Присваивание значений полям объекта minivan
                    minivan.passengers = 7;
                    minivan.fuelcap = 16;
                    minivan.mpg = 21;
// Присваивание значений полям объекта sportscar
                    sportscar.passengers = 2;
                    sportscar.fuelcap = 14;
                    sportscar.mpg = 12;
                    System.out.print("Мини-фургон может перевезти " +
                            minivan.passengers + " пассажиров. ");
                    minivan.range(); // отображение информации о дальности
// поездки мини-фургона
                    System.out.print("Спортивный автомобиль может перевезти " +
                            sportscar.passengers + " пассажиров. ");
                    sportscar.range(); // отображение дальности поездки
// спортивного автомобиля
                }
            }
        }
/*Рассмотрим основные компоненты данной программы. Начнем с метода
range (). Первая строка этого метода выглядит так:
void range() {
В этой строке объявляется метод range, для которого не предусмотрены
параметры. В качестве типа, возвращаемого этим методом, указано ключевое
слово void. Таким образом, метод range () не возвращает вызывающей части
программы никаких данных. И завершается строка открывающей фигурной
скобкой, обозначающей начало тела метода.
Тело метода range () состоит из единственной строки кода:
System.out.println("Дальность поездки - " + fuelcap * mpg + " миль.");
которая выводит на экран дальность поездки транспортного средства как результат
перемножения значений переменных fuelcap и mpg. А поскольку
у каждого объекта типа Vehicle имеются собственные копии переменных
fuelcap и mpg, то при вызове метода range () используются данные текущего
объекта.
Действие метода range () завершается по достижении закрывающей фигурной
скобки его тела. После этого управление возвращается вызывающей части
программы.
А теперь рассмотрим подробнее следующую строку кода в методе main ():
minivan.range();
в которой вызывается метод range () для объекта minivan. Чтобы вызвать ме-
тод для конкретного объекта, следует указать имя этого объекта перед именем
метода, используя точечную нотацию. При вызове метода ему передается управление
потоком выполнения программы. Когда метод завершит свое действие,
управление будет возвращено вызывающей части программы, и ее выполнение
продолжится со строки кода, следующей за вызовом метода. В данном случае в результате вызова minivan, range () отображается дальность
поездки транспортного средства, которое задано объектом minivan.
Точно так же при вызове sportscar. range () на экран выводится дальность
поездки транспортного средства, которое задано объектом sportscar. При
каждом вызове метода range () отображается дальность поездки для указанного
объекта.
Необходимо отметить следующую особенность метода range (): обращение
к переменным экземпляра fuelcap и mpg осуществляется в нем без применения
точечной нотации. Если в методе используется переменная экземпляра,
определенная в его классе, то обращаться к ней можно напрямую, не указывая
объект. На самом деле такой подход вполне логичен. Ведь метод всегда вызывается
относительно некоторого объекта своего класса, а следовательно, при вызове
метода объект известен и нет никакой необходимости определять его еще
раз. Это означает, что переменные fuelcap и mpg, встречающиеся в теле метода
range (), неявно обозначают их копии, находящиеся в том объекте, для которого
вызывается метод range ().*/