package ОсновыJava.УправляющиеИнструкции;
// Демонстрация использования укороченных логических операторов
public class УкроченныеЛогОператоры {
    public static void main(String args[]) {
        int n, d;
        n = 10;
        d = 2;
        if (d != 0 && (n % d) == 0)
            System.out.println(d + " является делителем " + n);
        d = 0; // установить для d нулевое значение  Второй операнд не вычисляется, поскольку значение переменной d равно нулю
        if (d != 0 && (n % d) == 0) // Укороченная  операция  предотвращает деление на нуль
        System.out.println(d + " является делителем " + n);   // А теперь те же самые действия выполняются без  использования укороченного логического оператора.
// В результате возникнет ошибка деления на нуль.
        if (d != 0 & (n % d) == 0) // Теперь вычисляются оба выражения;  в результате чего будет выполняться  деление на нуль
            System.out.println(d + " является делителем " + n);
    }
}
/*С целью предотвращения возможности деления на нуль в условной инструкции
i f сначала проверяется, равно ли нулю значение переменной d. Если эта
проверка дает истинный результат, вычисление второго операнда укороченного
логического оператора И не выполняется. Например, если значение переменной
d равно 2, то вычисляется остаток от деления по модулю. Если же значение
переменной d равно нулю, то операция деления по модулю пропускается, чем
предотвращается деление на нуль. В конце применяется обычный логический оператор И, в котором вычисляются оба операнда, что может привести к делению
на нуль при выполнении данной программы.*/