package Lesson2;


public class PrimitiveDataTypes {
    public static void main (String [] args) {
        
        byte b1 = 10;
        byte b2 = 100; //127 максимально допустимое  значение
        
        short s1 = 5;
        short s2 = -10;
        short s3 = 0;
        
        int i1 = 500;
        
        long l1 = 1000;
        long l2 = 10000000000L; // L обозначает то, что мы используем тип данных long
        // если использовать просто 10 млрд без L, компилятор не прочитает это выражение
        // т.к думает, что это int, а у int макс значение ~ 2.2 млрд
        // по дефолту все числа идут int, поэтому нужно указывать конкретно L
        
        float f1 = 3.14F;
        float f2 = 2.5f;
        // указываем напрямую F/f, тк дефолтный тип данных для дробей - double
        float f3 = 20;
        //преобразуется в int
        //если напишем 20.0 - выдаст ошибку, нужно писать 20.0f
        
        
        double d1 = 4.4;
        // можно с D/d, а можно и без ничего на конце, тк double - дефолт
        
        char c1 = 'a';
        char c2 = 'A';
        char c3 = '7';
        // char c4 = 'ab' - ошибка, можно только 1 символ и '' ковычках, не в ""
        char c5 = ' ';
        //char c6 = '  ' - ошибка, пробел тоже символ, можно только один
        char c7 = 300;
        // выведет 300-ый символ в Юникоде, те Ĭ
        char c8 = '\u1234';
        // ሴ символ из юникода по 16-ричной системе счисления
        
        
        System.out.println(c1);
        // a
        System.out.println(s2);
        // -10
        System.out.println(f2);
        // 2.5 (f не выводится)
        System.out.println(c7);
        // Ĭ
        System.out.println(c8);
        // ሴ
        
        boolean bool1 = true;
        boolean bool2 = false;
        
        System.out.println(bool1);
        // true
        System.out.println(bool2);
        // false
        
        int a1 = 60;
        int a2 = 0b111100; // 60 (b значает то, что число в двоичной системе)
        int a3 = 074; // 60 (тк в начале ноль компилятор понимает, что это 7-ричная сист)
        int a4 = 0x3C; // 60 (0x - так компилятор понимает, что это 16-ричная система)
        
        int a5 = 1___000__000; // __ разделяет большие числа для удобства чтения
        int a6 = 1000__000___000; // 1000000000
        // __ андерскор нельзя использовать в начале или конце числа,до точки и после точки в дробных, до и после букв L, F, D, l, f, d, перед и после 0B, 0b, 0X, 0x
        
        
        System.out.println(a6);
    }
}
